AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template will produce an EC2 Web Host
Parameters:
  InstanceType:
    Description: Web Host EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m5.large
  MyVPC:
    Description: Select Your VPC (Most Likely the Default VPC)
    Type: 'AWS::EC2::VPC::Id'
  PublicSubnet:
    Description: Select a Public Subnet from your VPC that has access to the internet
    Type: 'AWS::EC2::Subnet::Id'
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    m5.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-west-1:
      HVM64: ami-0b2ca94b5b49e0132
    us-west-2:
      HVM64: ami-0800fc0fa715fdcfe
    us-east-1:
      HVM64: ami-0aeeebd8d2ab47354
    us-east-2:
      HVM64: ami-0d8d212151031f51c
    eu-west-1:
      HVM64: ami-0ac43988dfd31ab9a
    eu-west-2:
      HVM64: ami-089539692cca55c6c
    eu-central-1:
      HVM64: ami-0bad4a5e987bdebde
    sa-east-1:
      HVM64: ami-07bfd9965e7b972d1
    ap-northeast-1:
      HVM64: ami-001f026eaf69770b4
    ap-northeast-2:
      HVM64: ami-02af1a55fd4da5ab1
    ap-southeast-1:
      HVM64: ami-0e8e39877665a7c92
    ap-southeast-2:
      HVM64: ami-0d2fb06f3c1484132
    ca-central-1:
      HVM64: ami-07625b74039b1a58b

Resources:
  WebhostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MyVPC
      GroupName: !Sub ${AWS::StackName} - Website Security Group
      GroupDescription: Allow Access to the Webhost on Port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - Web Host Security Group
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebhostSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
      UserData: 
        Fn::Base64:
          !Sub | 
          #!/bin/sh
          yum -y update
          yum -y install httpd
          amazon-linux-extras install php7.2
          yum -y install php-mbstring
          yum -y install telnet
          case $(ps -p 1 -o comm | tail -1) in
          systemd) systemctl enable --now httpd ;;
          init) chkconfig httpd on; service httpd start ;;
          *) echo "Error starting httpd (OS not using init or systemd)." 2>&1
          esac
          if [ ! -f /var/www/html/s3-web-host.tar.gz ]; then
          cd /var/www/html
          wget https://workshop-objects.s3.amazonaws.com/general-id/s3_general_lab/s3-web-host.tar
          tar xvf s3-web-host.tar
          chown apache:root /var/www/html/labs/s3/s3.conf.php
          chown apache:root /var/www/html/labs/s3/reset_config/s3.conf.php
          fi
          yum -y update
Outputs:
  PublicIP:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicIp
    Description: Newly created webhost Public IP
  PublicDNS:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
    Description: Newly created webhost Public DNS URL
